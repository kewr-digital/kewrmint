// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: atomone/photon/v1/photon.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "atomone.photon.v1";

/** Params defines the parameters for the photon module. */
export interface Params {
  /** conversion_rate defines the rate at which atone is converted to photon */
  conversion_rate: string;
  /** max_mint_amount defines the maximum amount of photon that can be minted */
  max_mint_amount: string;
}

function createBaseParams(): Params {
  return { conversion_rate: "", max_mint_amount: "" };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversion_rate !== "") {
      writer.uint32(10).string(message.conversion_rate);
    }
    if (message.max_mint_amount !== "") {
      writer.uint32(18).string(message.max_mint_amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.conversion_rate = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.max_mint_amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      conversion_rate: isSet(object.conversion_rate) ? globalThis.String(object.conversion_rate) : "",
      max_mint_amount: isSet(object.max_mint_amount) ? globalThis.String(object.max_mint_amount) : "",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.conversion_rate !== "") {
      obj.conversion_rate = message.conversion_rate;
    }
    if (message.max_mint_amount !== "") {
      obj.max_mint_amount = message.max_mint_amount;
    }
    return obj;
  },

  create(base?: DeepPartial<Params>): Params {
    return Params.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Params>): Params {
    const message = createBaseParams();
    message.conversion_rate = object.conversion_rate ?? "";
    message.max_mint_amount = object.max_mint_amount ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
